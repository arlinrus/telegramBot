from aiogram import Bot,Dispatcher,types
from aiogram.types import KeyboardButton,ReplyKeyboardMarkup,ReplyKeyboardRemove,ContentType, InlineKeyboardButton, InlineKeyboardMarkup,InputFile,InputMediaPhoto
from aiogram import executor
import logging
import asyncio
from random import randrange
from colorcet import kb
import os
from aiogram.types.input_file import InputFile
from aiogram.dispatcher.filters import Text
import cv2

logging.basicConfig(level = logging.INFO)
bot = Bot(token = TOKIENAPI)
dp = Dispatcher(bot)

FORMATTED_TEXT = '''
–ó–∞—á–µ–º –Ω—É–∂–µ–Ω —ç—Ç–æ—Ç –±–æ—Ç?
'''
FORMATTED_TEXT2 = '''
–ß–µ–º –∑–∞–Ω–∏–º–∞–µ–º—Å—è —Ñ–∏—Ä–º–∞ Kedrovv?
...
–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –∫–µ–¥—Ä?
...
–ß—Ç–æ –≤—ã–±—Ä–∞—Ç—å : –±–∞–Ω—è-–±–æ—á–∫–∞ –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –±–∞–Ω—è?
...
–ö–µ–¥—Ä –ø—Ä–∞–≤–¥–∞ –ª–µ—á–∏—Ç?
...
'''
FORMATTED_TEXT3 ='''
/help - –Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–Ω—è—Ö –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
/description - –Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
/questions - –Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
'''

#–ö–õ–ê–í–ê
kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton('/help')).insert(KeyboardButton('/description')).insert(KeyboardButton('/questions'))

ikb1 = InlineKeyboardMarkup(row_width=1)
ikb2=InlineKeyboardButton(text = 'Instagramüì∑', callback_data='social_inst' , url = 'https://www.instagram.com/kedrovv__?igsh=NnVkc3hzN3JpZjA4')
ikb3=InlineKeyboardButton(text = 'Telegramüìç', callback_data='social_tg', url = 'https://t.me/kedrovv_bath')
ikb1.insert(ikb2)
ikb1.insert(ikb3)

kp = InlineKeyboardMarkup(row_width=3)
kp1 = InlineKeyboardButton(text = '–û–∫—Ç–∞',  callback_data= 'ban_okta')
kp2 = InlineKeyboardButton(text = '–û–≤–∞–ª—å–Ω–∞—è',callback_data='ban_oval' )
kp3 = InlineKeyboardButton(text = '–ö—Ä—É–≥–ª–∞—è' ,callback_data= 'ban_round')
kp.add(kp1).add(kp2)
kp.insert(kp3)

#–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–∏ –æ–∫—Ç—ã
okta_inline = InlineKeyboardMarkup(row_width=2)
oval1 = InlineKeyboardButton(text = '4 –º–µ—Ç—Ä–∞',  callback_data= '4metr')
oval2 = InlineKeyboardButton(text = '4,5 –º–µ—Ç—Ä–∞  –ø–µ—Ä–µ–¥',  callback_data= '4,5metr1')
oval3 = InlineKeyboardButton(text = '4,5 –º–µ—Ç—Ä–∞ –±–æ–∫',  callback_data= '4,5metr2')
oval4 = InlineKeyboardButton(text = '5 –º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥',  callback_data= '5metr1')
oval5 = InlineKeyboardButton(text = '5 –º–µ—Ç—Ä–æ–≤ –±–æ–∫',  callback_data= '5metr2')
oval6 = InlineKeyboardButton(text = '6 –º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥',  callback_data= '6metr1')
oval7 = InlineKeyboardButton(text = '6 –º–µ—Ç—Ä–æ–≤ –±–æ–∫',  callback_data= '6metr2')
okta_inline.insert(oval1)
okta_inline.insert(oval2).insert(oval3)
okta_inline.insert(oval4).insert(oval5)
okta_inline.insert(oval6).insert(oval7)

#–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–∏ –æ–≤–∞–ª
oval_inline = InlineKeyboardMarkup(row_width=2, resize_keyboard=True )
oval1=InlineKeyboardButton(text = '4 –º–µ—Ç—Ä–∞ –±–æ–∫',  callback_data= '4oval1')
oval2=InlineKeyboardButton(text = '4 –º–µ—Ç—Ä–∞ –ø–µ—Ä–µ–¥',  callback_data= '4oval2')
oval3=InlineKeyboardButton(text = '4x4 –º–µ—Ç—Ä–∞',  callback_data= '4x4oval')
oval4=InlineKeyboardButton(text = '4x5 –º–µ—Ç—Ä–∞',  callback_data= '4x5oval')
oval_inline.insert(oval1).insert(oval2)
oval_inline.insert(oval3).insert(oval4)


#–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–∏ –∫—Ä—É–≥–ª–∞—è
round_inline = InlineKeyboardMarkup(row_width=3, resize_keyboard=True )
round1=InlineKeyboardButton(text='3 –º–µ—Ç—Ä–∞', callback_data='3round')
round2=InlineKeyboardButton(text='4 –º–µ—Ç—Ä–∞', callback_data='4round')
round3=InlineKeyboardButton(text='4,5 –º–µ—Ç—Ä–æ–≤', callback_data='4x5round')
round4=InlineKeyboardButton(text='5 –º–µ—Ç—Ä–æ–≤', callback_data='6round')
round5=InlineKeyboardButton(text='6 –º–µ—Ç—Ä–æ–≤', callback_data='7round')
round_inline.insert(round1).insert(round2)
round_inline.insert(round3).insert(round4)
round_inline.insert(round5)

ikb = InlineKeyboardMarkup(row_width=1)
ib1 = InlineKeyboardButton("–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—Éüìå", callback_data='like')
ib2 = InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –±–∞–Ω—éüìå", callback_data='dislike')
ib3 = InlineKeyboardButton("–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—èüìå",url = 'https://t.me/iamarlinrus')
ib4 = InlineKeyboardButton("–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏üìå",callback_data='cosmed')
ib5 = InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query='<-- –±–∞–Ω–∏ –∏–∑ –∞–ª—Ç–∞–π—Å–∫–æ–≥–æ –∫–µ–¥—Ä–∞')
ikb.insert(ib1)
ikb.insert(ib2)
ikb.insert(ib3)
ikb.insert(ib4)
ikb.insert(ib5)



async def on_startup(_):
    print('Ready!')


#START AND HELP
@dp.message_handler(commands = ['start'])
async def cmd_start(message: types.Message):
    await bot.send_message(chat_id = message.from_user.id,
                           text = FORMATTED_TEXT3 ,
                           reply_markup= kb)
    await message.delete()

@dp.message_handler(commands = ['description'])
async def cmd_start(message: types.Message):
    await bot.send_message(chat_id = message.from_user.id,
                           text = FORMATTED_TEXT )
    await message.delete()

@dp.message_handler(commands = ['help'])
async def cmd_sm(message: types.Message):
    await bot.send_message(chat_id = message.from_user.id,
                           text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                           reply_markup = ikb )

@dp.message_handler(commands = ['questions'])
async def cmd_sm(message: types.Message):
    await bot.send_message(chat_id = message.from_user.id,
                           text=FORMATTED_TEXT2)
@dp.callback_query_handler(text = 'like')
async def cmd_know(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id )
    await bot.send_message(call.from_user.id,text= '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –±–∞–Ω–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: ' ,reply_markup=kp)

@dp.callback_query_handler(text='dislike')
async def cmd_order(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id,text = '–ó–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É: 89819542507', reply_markup= ib2)

@dp.callback_query_handler(text='cosmed')
async def cmd_order(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id,text = '–ú—ã –µ—Å—Ç—å –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö >>> –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π!', reply_markup= ikb1)

@dp.callback_query_handler(text_contains='social_')
async def cmd_social(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    if call.data == "social_inst":
        await bot.send_message(call.from_user.id,  call.message.message_id)
    if call.data == "social_inst":
        await bot.send_message(call.from_user.id,  call.message.message_id)

@dp.callback_query_handler(text_contains='ban_')
async def cmd_bani(call: types.CallbackQuery):
    if call.data == 'ban_okta':
        await bot.send_message(call.from_user.id,text ='–í—ã–±–µ—Ä–∏—Ç–µ: ', reply_markup=okta_inline)
    if call.data == 'ban_oval':
        await bot.send_message(call.from_user.id, text ='–í—ã–±–µ—Ä–∏—Ç–µ: ', reply_markup=oval_inline)
    if call.data == 'ban_round':
        await bot.send_message(call.from_user.id, text ='–í—ã–±–µ—Ä–∏—Ç–µ: ',reply_markup=round_inline )


#–û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –±–∞–Ω–∏ –æ–∫—Ç—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –∫–∞–∂–¥–æ–º—É –º–µ—Ç—Ä–∞–∂—É
@dp.callback_query_handler(text_contains = 'metr')
async def cmd_metr(call: types.CallbackQuery):
    # await bot.delete_message(call.from_user.id, call.message.message_id)
    if call.data == '4metr':
        photo_path = 'okta-banya-bochka-4_5-metra-s-kozyrkom-v.jpg'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)
    if call.data == '4,5metr1':
        photo_path = 'OKTA 4,5m_st_2.jpg'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)
    if call.data == '4,5metr2':
        photo_path = 'OKTA_4_5_b_2.jpg'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)
    if call.data == '5metr1':
        photo_path = 'okta-banya-bochka-5_5-metrov-s-kozyrkom-.jpg'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)
    if call.data == '5metr2':
        photo_path = 'okta-banya-bochka-5-metrov-so-vhodom-sbo.jpg'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)
    if call.data == '6metr1':
        photo_path = 'OKTA_6m_vr_2.jpg'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)
    if call.data == '6metr2':
        photo_path = 'okta-banya-bochka-6-metrov-so-vhodom-sbo.jpg'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)

#–û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –æ–≤–∞–ª—å–Ω–æ–π –±–∞–Ω–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –∫–∞–∂–¥–æ–º—É –º–µ—Ç—Ä–∞–∂—É
@dp.callback_query_handler(text_contains = 'oval')
async def cmd_oval(call: types.CallbackQuery):
    # await bot.delete_message(call.from_user.id, call.message.message_id)
    if call.data == '4oval1':
        photo_path1 = 'oval4pered.jpg'
        with open(photo_path1, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)
    if call.data == '4oval2':
        photo_path1 = 'oval4metr.jpg'
        with open(photo_path1, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)
    if call.data == '4x4oval':
        photo_path1 = 'oval4x4.jpg'
        with open(photo_path1, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)
    if call.data == '4x5oval':
        photo_path1 = 'oval4x5.jpg'
        with open(photo_path1, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)

#–û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –∫—Ä—É–≥–ª–æ–π –±–∞–Ω–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –∫–∞–∂–¥–æ–º—É –º–µ—Ç—Ä–∞–∂—É
@dp.callback_query_handler(text_contains = 'round')
async def cmd_round(call: types.CallbackQuery):
    # await bot.delete_message(call.from_user.id, call.message.message_id)
    if call.data == '3round':
        photo_path = 'round3.jpg'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)
    if call.data == '4round':
        photo_path = 'round4.jpg'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)
    if call.data == '4x5round':
        photo_path = 'round4x5.jpg'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)
    if call.data == '6round':
        photo_path = 'round5.jpg'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)
    if call.data == '7round':
        photo_path = 'round6.jpg'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(call.from_user.id, photo)



if __name__ == '__main__' :
    executor.start_polling(dp, skip_updates = True, on_startup = on_startup )
